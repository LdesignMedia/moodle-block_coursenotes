{"version":3,"file":"coursenotes.min.js","sources":["../src/coursenotes.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Log from 'core/log';\n\nexport const init = () => {\n    let noteHistory = [];\n    const courseNoteExists = document.getElementById('coursenote-display').textContent.trim() !== '';\n    const textarea = document.getElementById('coursenote-textarea');\n\n    // Hide form if course note exists.\n    if (courseNoteExists) {\n        document.getElementById('coursenote-form').style.display = 'none';\n    }\n\n    document.getElementById('edit-icon').addEventListener('click', function () {\n        document.getElementById('coursenote-display').style.display = 'none';\n        this.style.display = 'none'; // Hide the edit icon itself.\n        document.getElementById('coursenote-form').style.display = 'block';\n\n        fetchNoteHistory();\n    });\n\n    document.getElementById('cancel-button').addEventListener('click', function () {\n        document.getElementById('coursenote-display').style.display = 'block';\n        document.getElementById('edit-icon').style.display = 'block'; // Show the edit icon again.\n        document.getElementById('coursenote-form').style.display = 'none';\n    });\n\n    document.getElementById('undo-button').addEventListener('click', function () {\n        if (noteHistory.length > 1) {\n            noteHistory.pop(); // Remove current note.\n            const lastNote = noteHistory[noteHistory.length - 1];\n            document.getElementById('coursenote-textarea').value = lastNote;\n            if (noteHistory.length <= 1) {\n                this.style.display = 'none'; // Hide undo button if only one note left.\n            }\n        }\n    });\n\n    let timeoutId;\n    // Fetch the block instance ID from the DOM.\n    const blockInstanceId = textarea.dataset.blockinstanceid;\n    const courseId = textarea.dataset.courseid;\n\n    textarea.addEventListener('input', () => {\n        clearTimeout(timeoutId);\n\n        if (textarea.value.length > 10) {\n            timeoutId = setTimeout(() => {\n                saveNoteAJAX(textarea.value);\n            }, 10000);\n        }\n    });\n    const saveNoteAJAX = (note) => {\n        let formattedNote;\n        formattedNote = stripHtmlTags(note);\n        Ajax.call([{\n            methodname: 'block_coursenotes_save_note',\n            args: {\n                coursenote: formattedNote,\n                blockinstanceid: blockInstanceId,\n                courseid: courseId\n            },\n            done: (response) => {\n                if (response.status) {\n                    noteHistory.push(note);\n                    noteHistory.shift();\n                    Log.log('Note saved successfully');\n                } else {\n                    Log.log('Error saving note:', response.message);\n                }\n            },\n            fail: (error) => {\n                Log.error('AJAX error: ' + JSON.stringify(error));\n            }\n        }]);\n    };\n\n    const stripHtmlTags = (str) => {\n        return str.replace(/<\\/?[^>]+(>|$)/g, \"\");\n    };\n\n    const fetchNoteHistory = () => {\n        Ajax.call([{\n            methodname: 'block_coursenotes_fetch_notes',\n            args: {\n                blockinstanceid: blockInstanceId,\n                courseid: courseId\n            },\n            done: (response) => {\n                if (response.status) {\n                    noteHistory = response.notes;\n                    if (noteHistory.length > 0) {\n                        document.getElementById('undo-button').style.display = 'block';\n                    }\n                    Log.log(response);\n                    Log.log('Note history fetched successfully');\n                } else {\n                    Log.log('Error fetching note history:', response.message);\n                }\n            },\n            fail: (error) => {\n                Log.error('AJAX error: ' + JSON.stringify(error));\n            }\n        }]);\n    };\n};\n"],"names":["noteHistory","courseNoteExists","document","getElementById","textContent","trim","textarea","timeoutId","style","display","addEventListener","fetchNoteHistory","length","pop","lastNote","value","blockInstanceId","dataset","blockinstanceid","courseId","courseid","clearTimeout","setTimeout","saveNoteAJAX","note","formattedNote","stripHtmlTags","call","methodname","args","coursenote","done","response","status","push","shift","log","message","fail","error","JSON","stringify","str","replace","notes"],"mappings":"4VAGoB,SACZA,YAAc,SACZC,iBAAwF,KAArEC,SAASC,eAAe,sBAAsBC,YAAYC,OAC7EC,SAAWJ,SAASC,eAAe,2BAgCrCI,UA7BAN,mBACAC,SAASC,eAAe,mBAAmBK,MAAMC,QAAU,QAG/DP,SAASC,eAAe,aAAaO,iBAAiB,SAAS,WAC3DR,SAASC,eAAe,sBAAsBK,MAAMC,QAAU,YACzDD,MAAMC,QAAU,OACrBP,SAASC,eAAe,mBAAmBK,MAAMC,QAAU,QAE3DE,sBAGJT,SAASC,eAAe,iBAAiBO,iBAAiB,SAAS,WAC/DR,SAASC,eAAe,sBAAsBK,MAAMC,QAAU,QAC9DP,SAASC,eAAe,aAAaK,MAAMC,QAAU,QACrDP,SAASC,eAAe,mBAAmBK,MAAMC,QAAU,UAG/DP,SAASC,eAAe,eAAeO,iBAAiB,SAAS,cACzDV,YAAYY,OAAS,EAAG,CACxBZ,YAAYa,YACNC,SAAWd,YAAYA,YAAYY,OAAS,GAClDV,SAASC,eAAe,uBAAuBY,MAAQD,SACnDd,YAAYY,QAAU,SACjBJ,MAAMC,QAAU,kBAO3BO,gBAAkBV,SAASW,QAAQC,gBACnCC,SAAWb,SAASW,QAAQG,SAElCd,SAASI,iBAAiB,SAAS,KAC/BW,aAAad,WAETD,SAASS,MAAMH,OAAS,KACxBL,UAAYe,YAAW,KACnBC,aAAajB,SAASS,SACvB,eAGLQ,aAAgBC,WACdC,cACJA,cAAgBC,cAAcF,oBACzBG,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CACFC,WAAYL,cACZP,gBAAiBF,gBACjBI,SAAUD,UAEdY,KAAOC,WACCA,SAASC,QACTjC,YAAYkC,KAAKV,MACjBxB,YAAYmC,qBACRC,IAAI,yCAEJA,IAAI,qBAAsBJ,SAASK,UAG/CC,KAAOC,qBACCA,MAAM,eAAiBC,KAAKC,UAAUF,aAKhDb,cAAiBgB,KACZA,IAAIC,QAAQ,kBAAmB,IAGpChC,iBAAmB,mBAChBgB,KAAK,CAAC,CACPC,WAAY,gCACZC,KAAM,CACFX,gBAAiBF,gBACjBI,SAAUD,UAEdY,KAAOC,WACCA,SAASC,QACTjC,YAAcgC,SAASY,MACnB5C,YAAYY,OAAS,IACrBV,SAASC,eAAe,eAAeK,MAAMC,QAAU,sBAEvD2B,IAAIJ,uBACJI,IAAI,mDAEJA,IAAI,+BAAgCJ,SAASK,UAGzDC,KAAOC,qBACCA,MAAM,eAAiBC,KAAKC,UAAUF"}